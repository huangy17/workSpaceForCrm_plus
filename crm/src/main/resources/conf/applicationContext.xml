<?xml version="1.0" encoding="UTF-8"?>
<!--
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--spring的配置文件：声明service ，dao， 工具类， 事务配置-->

    <!-- 配置监听器，向spring容器发布事件，自动触发监听器的onApplicationEvent方法 -->
    <bean class="com.bjpowernode.crm.web.listener.SysInitListener"></bean>

    <context:component-scan base-package="com.bjpowernode.*" />

    <!--<mvc:default-servlet-handler/>-->

    <!--声明拦截器-->
    <!--<mvc:interceptors>
        &lt;!&ndash;声明第一个拦截器: 注意一定要最先声明拦截器，因为配置文件是按上下顺序生成配置的&ndash;&gt;
        &lt;!&ndash;这里需要声明一下，因为<mvc:annotation-driven/>此标签中有默认的拦截器，&ndash;&gt;
        <bean class="com.bjpowernode.huangyb.handler.LoginInterceptor"/>
        <mvc:interceptor>
            &lt;!&ndash;指定拦截器的拦截地址
                path：拦截的uri地址，使用 ** 通配符。
                      例如： path="/user/**"
                      http://localhost:8080/user/listUser.do
                      http://localhost:8080/user/query/queryUser.do
            &ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash;指定使用的拦截器&ndash;&gt;
            <bean class="com.bjpowernode.huangyb.handler.LoginInterceptor"/>
        </mvc:interceptor>

    </mvc:interceptors>-->

    <context:property-placeholder location="classpath:conf/jdbc.properties" />

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:conf/mybatis.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="factory" />
        <property name="basePackage" value="com.bjpowernode.crm.settings.dao,com.bjpowernode.crm.workbench.dao" />
    </bean>

    <!--事务配置-->
    <!--声明事务的控制-->
    <!--声明事务管理器-->
    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定数据源DataSource-->
        <property name="dataSource" ref="dataSource" />
    </bean>



    <!--开启事务注解驱动： 告诉框架使用注解管理事务
        transaction-manager:指定事务管理器的id
    -->
    <!--2.声明业务方法的事务属性（隔离级别，传播行为，超时）
        id:给业务方法配置事务段代码起个名称，唯一值
        transaction-manager:事务管理器的id
    -->
    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
        <!--给具体的业务方法增加事务的说明-->
        <tx:attributes>
            <!--
               给具体的业务方法，说明他需要的事务属性
               name: 业务方法名称。 配置name的值： 1. 业务方法的名称； 2. 带有部分通配符(*)的方法名称； 3 使用*
               propagation:指定传播行为的值
               isolation：隔离级别
               read-only：是否只读，默认是false
               timeout：超时时间
               rollback-for：指定回滚的异常类列表，使用的异常全限定名称
            -->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="false" timeout="20"
                       rollback-for="java.lang.NullPointerException,com.bjpowernode.excetion.NotEnougthException"/>


            <!--在业务方法有命名规则后， 可以对一些方法使用事务-->
<!--            <tx:method name="add*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />-->
            <tx:method name="get*"  propagation="REQUIRED" rollback-for="java.lang.Exception" read-only="true"/>
            <tx:method name="remove*"  propagation="REQUIRED" rollback-for="java.lang.Exception" />

            <!--以上方法以外的 * :querySale, findSale, searchSale -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!--声明切入点表达式： 表示那些包中的类，类中的方法参与事务-->
    <aop:config>
        <!--声明切入点表达式
            expression：切入点表达式， 表示那些类和类中的方法要参与事务
            id：切入点表达式的名称，唯一值

            expression怎么写？
        -->
        <aop:pointcut id="servicePointcut" expression="execution(* *..service..*.*(..))" />
        <!--关联切入点表达式和事务通知-->
        <aop:advisor advice-ref="serviceAdvice" pointcut-ref="servicePointcut" />
    </aop:config>





</beans>